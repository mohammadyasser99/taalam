// <auto-generated />
using System;
using E_Learning.DAL.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Learning.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240918094838_CategoryImage")]
    partial class CategoryImage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Learning.DAL.Models.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndOfSale")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "option1",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Body = "option2",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Body = "option3",
                            QuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            Body = "option1",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 5,
                            Body = "option2",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 6,
                            Body = "option3",
                            QuestionId = 2
                        },
                        new
                        {
                            Id = 7,
                            Body = "option1",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 8,
                            Body = "option2",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 9,
                            Body = "option3",
                            QuestionId = 3
                        },
                        new
                        {
                            Id = 10,
                            Body = "option1",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 11,
                            Body = "option2",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 12,
                            Body = "option3",
                            QuestionId = 4
                        },
                        new
                        {
                            Id = 13,
                            Body = "option1",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 14,
                            Body = "option2",
                            QuestionId = 5
                        },
                        new
                        {
                            Id = 15,
                            Body = "option3",
                            QuestionId = 5
                        });
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Cart", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            UserId = 3,
                            CourseId = 3
                        },
                        new
                        {
                            UserId = 4,
                            CourseId = 4
                        });
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Programming"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sporting"
                        });
                });

            modelBuilder.Entity("E_Learning.DAL.Models.CertificateOfCompletion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssuedAy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CertificatesOfCompletion", (string)null);
                });

            modelBuilder.Entity("E_Learning.DAL.Models.CompletedLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("EnrollmentCourseId")
                        .HasColumnType("int");

                    b.Property<int?>("EnrollmentUserId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LessonId");

                    b.HasIndex("UserId");

                    b.HasIndex("EnrollmentUserId", "EnrollmentCourseId");

                    b.ToTable("CompletedLessons", (string)null);
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CoverPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LessonsNo")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("decimal(2,1)");

                    b.Property<int>("SectionsNo")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CoverPicture = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQPvJBvVedFjpONzC1ZOR-YSWauBp9ZKK6ydA&s",
                            CreationDate = new DateTime(2024, 9, 18, 12, 48, 33, 509, DateTimeKind.Local).AddTicks(8610),
                            IsDeleted = false,
                            LessonsNo = 0,
                            Price = 0m,
                            Rate = 1m,
                            SectionsNo = 0,
                            Title = "C# From Zero To SuperHero",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CoverPicture = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS2o9_OmdunGnBKDIiSGo3uLYvA8vySqQ-M9fyVT_nys9HMMbZJv8cU8YtPkPbexgrf3J8&usqp=CAU",
                            CreationDate = new DateTime(2024, 9, 18, 12, 48, 33, 509, DateTimeKind.Local).AddTicks(8697),
                            IsDeleted = false,
                            LessonsNo = 0,
                            Price = 0m,
                            Rate = 2m,
                            SectionsNo = 0,
                            Title = "Data Strcutre",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CoverPicture = "https://dynamic.brandcrowd.com/template/preview/design/90728fda-b283-4797-973e-9a0775dec439?v=4&designTemplateVersion=5&size=design-preview-standalone-1x",
                            CreationDate = new DateTime(2024, 9, 18, 12, 48, 33, 509, DateTimeKind.Local).AddTicks(8702),
                            IsDeleted = false,
                            LessonsNo = 0,
                            Price = 0m,
                            Rate = 4m,
                            SectionsNo = 0,
                            Title = "Diet",
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CoverPicture = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSo1cHnjZlK64h9Pc5OvWCYfYWYexByKhPpeg&s",
                            CreationDate = new DateTime(2024, 9, 18, 12, 48, 33, 509, DateTimeKind.Local).AddTicks(8706),
                            IsDeleted = false,
                            LessonsNo = 0,
                            Price = 0m,
                            Rate = 2m,
                            SectionsNo = 0,
                            Title = "GYM",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CoverPicture = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQCmO_j4YW82XwWIM-_Fo6afxyuN2pSGoZMBQ&s",
                            CreationDate = new DateTime(2024, 9, 18, 12, 48, 33, 509, DateTimeKind.Local).AddTicks(8710),
                            IsDeleted = false,
                            LessonsNo = 0,
                            Price = 0m,
                            Rate = 2m,
                            SectionsNo = 0,
                            Title = "Alogrithms",
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CoverPicture = "https://d1jnx9ba8s6j9r.cloudfront.net/imgver.1551437392/img/co_img_1539_1633434090.png",
                            CreationDate = new DateTime(2024, 9, 18, 12, 48, 33, 509, DateTimeKind.Local).AddTicks(8713),
                            IsDeleted = false,
                            LessonsNo = 0,
                            Price = 0m,
                            Rate = 5m,
                            SectionsNo = 0,
                            Title = "Introduction to C++",
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            CoverPicture = "https://static.gunnarpeipman.com/wp-content/uploads/2019/12/ef-core-featured.png",
                            CreationDate = new DateTime(2024, 9, 18, 12, 48, 33, 509, DateTimeKind.Local).AddTicks(8717),
                            IsDeleted = false,
                            LessonsNo = 0,
                            Price = 0m,
                            Rate = 4m,
                            SectionsNo = 0,
                            Title = "EF Core",
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CoverPicture = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTKIa50KjBUhvtvuMbOaL_QtJrzstWIQA3YSg&s",
                            CreationDate = new DateTime(2024, 9, 18, 12, 48, 33, 509, DateTimeKind.Local).AddTicks(8721),
                            IsDeleted = false,
                            LessonsNo = 0,
                            Price = 0m,
                            Rate = 5m,
                            SectionsNo = 0,
                            Title = "Database Using SQL Server",
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            CoverPicture = "https://www.construx.com/wp-content/uploads/2018/08/design-pattern-essentials-course-image.jpg",
                            CreationDate = new DateTime(2024, 9, 18, 12, 48, 33, 509, DateTimeKind.Local).AddTicks(8725),
                            IsDeleted = false,
                            LessonsNo = 0,
                            Price = 0m,
                            Rate = 3m,
                            SectionsNo = 0,
                            Title = "Design Pattern",
                            UserId = 1
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            CoverPicture = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcS-HJM_i7rOg2yY9OgpVPYRLL4fYjA9CTfEoQ&s",
                            CreationDate = new DateTime(2024, 9, 18, 12, 48, 33, 509, DateTimeKind.Local).AddTicks(8729),
                            IsDeleted = false,
                            LessonsNo = 0,
                            Price = 0m,
                            Rate = 1m,
                            SectionsNo = 0,
                            Title = "SOLID Principle",
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            CoverPicture = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQtx7PjCp_KBWQZtHauOWMG2WiRpXxjpbYf3w&s",
                            CreationDate = new DateTime(2024, 9, 18, 12, 48, 33, 509, DateTimeKind.Local).AddTicks(8734),
                            IsDeleted = false,
                            LessonsNo = 0,
                            Price = 0m,
                            Rate = 4m,
                            SectionsNo = 0,
                            Title = "How To Train",
                            UserId = 2
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            CoverPicture = "https://static.vecteezy.com/system/resources/previews/024/700/836/non_2x/fitness-gym-training-social-media-timeline-cover-and-video-thumbnail-and-web-banner-design-free-vector.jpg",
                            CreationDate = new DateTime(2024, 9, 18, 12, 48, 33, 509, DateTimeKind.Local).AddTicks(8738),
                            IsDeleted = false,
                            LessonsNo = 0,
                            Price = 0m,
                            Rate = 1m,
                            SectionsNo = 0,
                            Title = "Life Coach",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Enrollment", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CompletedLessons")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("ProgressPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            UserId = 3,
                            CourseId = 1,
                            EnrollmentDate = new DateTime(2024, 9, 18, 12, 48, 33, 512, DateTimeKind.Local).AddTicks(1745)
                        },
                        new
                        {
                            UserId = 4,
                            CourseId = 2,
                            EnrollmentDate = new DateTime(2024, 9, 18, 13, 48, 33, 512, DateTimeKind.Local).AddTicks(1832)
                        });
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Lessons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                            SectionId = 1,
                            Title = "orientation"
                        },
                        new
                        {
                            Id = 2,
                            Content = "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4",
                            SectionId = 1,
                            Title = "introduction"
                        },
                        new
                        {
                            Id = 3,
                            Content = "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4",
                            SectionId = 2,
                            Title = "Encapsulation"
                        },
                        new
                        {
                            Id = 4,
                            Content = "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerEscapes.mp4",
                            SectionId = 2,
                            Title = "inheritance"
                        },
                        new
                        {
                            Id = 5,
                            Content = "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerFun.mp4",
                            SectionId = 2,
                            Title = "abstraction"
                        },
                        new
                        {
                            Id = 6,
                            Content = "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerJoyrides.mp4",
                            SectionId = 2,
                            Title = "polymorphism"
                        },
                        new
                        {
                            Id = 7,
                            Content = "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerMeltdowns.mp4",
                            SectionId = 3,
                            Title = "introduction"
                        },
                        new
                        {
                            Id = 8,
                            Content = "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4",
                            SectionId = 3,
                            Title = "Binary tree"
                        },
                        new
                        {
                            Id = 9,
                            Content = "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/SubaruOutbackOnStreetAndDirt.mp4",
                            SectionId = 4,
                            Title = "introduction"
                        },
                        new
                        {
                            Id = 10,
                            Content = "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4",
                            SectionId = 4,
                            Title = "hum ya gamal"
                        },
                        new
                        {
                            Id = 11,
                            Content = "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                            SectionId = 4,
                            Title = "calories"
                        },
                        new
                        {
                            Id = 12,
                            Content = "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4",
                            SectionId = 5,
                            Title = "3ash ya wa7sh"
                        },
                        new
                        {
                            Id = 13,
                            Content = "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ForBiggerBlazes.mp4",
                            SectionId = 5,
                            Title = "el3ab sa7"
                        });
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModelAnswer")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "Question1",
                            ModelAnswer = 1,
                            QuizId = 1
                        },
                        new
                        {
                            Id = 2,
                            Body = "Question2",
                            ModelAnswer = 2,
                            QuizId = 2
                        },
                        new
                        {
                            Id = 3,
                            Body = "Question3",
                            ModelAnswer = 3,
                            QuizId = 3
                        },
                        new
                        {
                            Id = 4,
                            Body = "Question4",
                            ModelAnswer = 2,
                            QuizId = 4
                        },
                        new
                        {
                            Id = 5,
                            Body = "Question5",
                            ModelAnswer = 1,
                            QuizId = 5
                        });
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId");

                    b.ToTable("Quizzes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Grade = 0,
                            SectionId = 1,
                            Title = "Quiz1"
                        },
                        new
                        {
                            Id = 2,
                            Grade = 0,
                            SectionId = 2,
                            Title = "Quiz2"
                        },
                        new
                        {
                            Id = 3,
                            Grade = 0,
                            SectionId = 3,
                            Title = "Quiz3"
                        },
                        new
                        {
                            Id = 4,
                            Grade = 0,
                            SectionId = 4,
                            Title = "Quiz4"
                        },
                        new
                        {
                            Id = 5,
                            Grade = 0,
                            SectionId = 5,
                            Title = "Quiz5"
                        });
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            Description = "Excellent course! Very well structured and informative.",
                            UserId = 1,
                            Value = 5
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 2,
                            Description = "Good course, but could use more examples.",
                            UserId = 1,
                            Value = 4
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 3,
                            Description = "Average course. The content was somewhat basic.",
                            UserId = 2,
                            Value = 3
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 4,
                            Description = "Great content, but the pace was a bit fast.",
                            UserId = 3,
                            Value = 4
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 5,
                            Description = "Not very helpful. The material was outdated.",
                            UserId = 4,
                            Value = 2
                        });
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("LessonsNo")
                        .HasColumnType("int");

                    b.Property<int>("SectionNumber")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseId = 1,
                            LessonsNo = 3,
                            SectionNumber = 1,
                            Title = "intro"
                        },
                        new
                        {
                            Id = 2,
                            CourseId = 1,
                            LessonsNo = 5,
                            SectionNumber = 2,
                            Title = "OOP"
                        },
                        new
                        {
                            Id = 3,
                            CourseId = 2,
                            LessonsNo = 3,
                            SectionNumber = 1,
                            Title = "Binary search"
                        },
                        new
                        {
                            Id = 4,
                            CourseId = 3,
                            LessonsNo = 4,
                            SectionNumber = 1,
                            Title = "Nutrition"
                        },
                        new
                        {
                            Id = 5,
                            CourseId = 4,
                            LessonsNo = 3,
                            SectionNumber = 1,
                            Title = "General"
                        });
                });

            modelBuilder.Entity("E_Learning.DAL.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GitHub")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Linkedin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpirationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Youtube")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6e24772-8e01-4eea-a6a0-738a5be9b3bb",
                            Email = "AbdallahShatta@gmail.com",
                            EmailConfirmed = false,
                            FName = "Abdallah",
                            Facebook = "https://www.facebook.com/abdalah.shatta",
                            LName = "Shatta",
                            Linkedin = "https://www.linkedin.com/in/abdallah-shatta55/",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTAM-SBzUfYOMhwc0o76MpvR7N4Yi43lcYt5g&s",
                            RefreshTokenExpirationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "44f2c1f4-df3a-4836-80ec-36a644ca3f5e",
                            Email = "MohamedErbahim@gmail.com",
                            EmailConfirmed = false,
                            FName = "Mohamed",
                            Facebook = "https://www.facebook.com/mido.ebrahim.9699/",
                            LName = "Ebrahim",
                            Linkedin = "https://www.linkedin.com/in/mohamed-abdelslam210/",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "https://pbs.twimg.com/profile_images/1745781333400399872/MN7Wm4Ya_400x400.jpg",
                            RefreshTokenExpirationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8af72d4f-ca57-4cd3-85da-16f012bd07dc",
                            Email = "MohsemTayseer@gmail.com",
                            EmailConfirmed = false,
                            FName = "Mohsen",
                            LName = "Tayseer",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "",
                            RefreshTokenExpirationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e00faeca-dda5-437c-8515-56117301e1fd",
                            Email = "MarwaElkasaby@gmail.com",
                            EmailConfirmed = false,
                            FName = "Marwa",
                            LName = "Elkasaby",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            ProfilePicture = "",
                            RefreshTokenExpirationDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("E_Learning.DAL.Models.WishList", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("WishList");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CourseId = 3,
                            Id = 0
                        },
                        new
                        {
                            UserId = 2,
                            CourseId = 4,
                            Id = 0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Answer", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Cart", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.Course", "Course")
                        .WithMany("Carts")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("E_Learning.DAL.Models.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.CertificateOfCompletion", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.Course", "Course")
                        .WithMany("CertificatesOfCompletion")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("E_Learning.DAL.Models.User", "User")
                        .WithMany("CertificatesOfCompletion")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.CompletedLesson", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("E_Learning.DAL.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("E_Learning.DAL.Models.User", "User")
                        .WithMany("CompletedLessonsList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("E_Learning.DAL.Models.Enrollment", null)
                        .WithMany("CompletedLessonsList")
                        .HasForeignKey("EnrollmentUserId", "EnrollmentCourseId");

                    b.Navigation("Course");

                    b.Navigation("Lesson");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Course", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Learning.DAL.Models.User", "User")
                        .WithMany("OwnedCourses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Enrollment", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("E_Learning.DAL.Models.User", "User")
                        .WithMany("UserEnrollments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Lesson", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.Section", "Section")
                        .WithMany("Lessons")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Question", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Quiz", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.Section", "Section")
                        .WithMany("Quizes")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Rating", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.Course", "Course")
                        .WithMany("Ratings")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Learning.DAL.Models.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Section", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.WishList", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.Course", "Course")
                        .WithMany("WishLists")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("E_Learning.DAL.Models.User", "User")
                        .WithMany("WishListItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Learning.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("E_Learning.DAL.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Course", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("CertificatesOfCompletion");

                    b.Navigation("Enrollments");

                    b.Navigation("Ratings");

                    b.Navigation("Sections");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Enrollment", b =>
                {
                    b.Navigation("CompletedLessonsList");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.Section", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("Quizes");
                });

            modelBuilder.Entity("E_Learning.DAL.Models.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("CertificatesOfCompletion");

                    b.Navigation("CompletedLessonsList");

                    b.Navigation("OwnedCourses");

                    b.Navigation("Ratings");

                    b.Navigation("UserEnrollments");

                    b.Navigation("WishListItems");
                });
#pragma warning restore 612, 618
        }
    }
}
